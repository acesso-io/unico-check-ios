// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AcessoBio
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
@_exported import AcessoBio
import CoreLocation
import CoreMotion
import CoreTelephony
import DeveloperToolsSupport
import DeviceProfiling
import FaceTecSDK
import Foundation
import Swift
import SystemConfiguration
import UIKit.UIDevice
import UIKit
import UnicoSdkBase
import UnicoSdkBase/*.NetworkCancellable*/
import UnicoSdkLiveness
import UnicoSdkLogger
import UnicoSdkPlugins
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol LibInfoWoker {
  func commitLibInfo()
}
@_hasMissingDesignatedInitializers final public class DefaultLibInfoWoker {
  @objc deinit
}
extension AcessoBio.DefaultLibInfoWoker : AcessoBio.LibInfoWoker {
  final public func commitLibInfo()
}
@objc @_inheritsConvenienceInitializers public class UnicoDefaults : ObjectiveC.NSObject {
  @objc public static let defaultFaceInferenceTimeout: Swift.Double
  @objc override dynamic public init()
  @objc deinit
}
@objc public class LivenessDTO : ObjectiveC.NSObject {
  public init(provider: AcessoBio.ProviderDTO?, maxAttempts: Swift.Int32?, attempts: Swift.Int32?, isLive: Swift.Bool?)
  @objc deinit
}
@objc public enum CreateProviderError : Swift.Int, Swift.Error {
  case undefined, kmmError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol CreateProviderUseCase {
  @objc func execute() -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc public class ErrorUnico : ObjectiveC.NSObject, Swift.Error {
  public var code: Swift.Int
  public var message: Swift.String?
  public var body: [Swift.String : Swift.String?]?
  @objc override dynamic public init()
  @objc public init(code: Swift.Int, message: Swift.String?, body: [Swift.String : Swift.String]?)
  @objc public func getMessage() -> Foundation.NSString
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class UnicoConfigDataSourceManager : ObjectiveC.NSObject {
  @objc public func manage(dataSource: any AcessoBio.AcessoBioConfigDataSource) -> AcessoBio.UnicoSetupData
  @objc override dynamic public init()
  @objc deinit
}
public protocol UnicoSecuritySDKDeviceInfo {
  var ip: Swift.String? { get }
  var geolocation: CoreLocation.CLLocation? { get }
}
public class UnicoSecuritySDK {
  public init()
  public func getDeviceInfo(completionHandler: @escaping (any AcessoBio.UnicoSecuritySDKDeviceInfo) -> Swift.Void)
  @objc deinit
}
public func printIfDebug(_ message: Any)
@objc public protocol UnicoFaceCameraPresenterInput {
  @objc var provider: AcessoBio.ProviderDTO { get }
}
@objc @_inheritsConvenienceInitializers final public class UnicoFaceCameraPresenter : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension AcessoBio.UnicoFaceCameraPresenter : AcessoBio.UnicoFaceCameraPresenterInput {
  @objc final public var provider: AcessoBio.ProviderDTO {
    @objc get
  }
}
@objc public protocol CaptureBehaviorWorker {
  @objc func startCapture()
}
@objc public enum UnicoEnumsIErrors : Swift.Int {
  case UNKNOWN_INTERNAL_ERROR = 73000
  case TAKE_PICTURE_ERROR = 73001
  case ERROR_MINIMUM_API = 73003
  case ERROR_SIMULATOR = 73006
  case NETWORK_ERROR = 73100
  case JSON_NOT_FOUND = 73200
  case JSON_INVALID = 73202
  case CONFIG_DATASOURCE_INVALID = 73203
  case AUTHENTICATION_REQUEST_ERROR = 73300
  case AUTHENTICATION_PARSE_ERROR = 73301
  case AUTHENTICATION_TOKEN_NOT_FOUND = 73302
  case FACETEC_GET_SESSION_FAILED = 73703
  case SESSION_STATUS_USER_CANCELLED = 73704
  case SESSION_STATUS_TIMEOUT = 73710
  case ENCRYPTION_ERROR = 73800
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class UnicoEnumsErrors : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class UnicoSetupServices : ObjectiveC.NSObject, AcessoBio.UnicoSetupServicesProtocol {
  public func getTokenUnico(unicoSetupData: AcessoBio.UnicoSetupData, localeTypes: AcessoBio.LocaleTypes, completion: @escaping AcessoBio.UnicoSetupServices.Completion)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DefaultSessionIdWorker {
  @objc deinit
}
@objc public protocol UnicoFaceCameraViewControllerOutput {
  @objc func startCapture()
  @objc func stopCapture()
}
@objc public class UnicoHttpHeaders : ObjectiveC.NSObject {
  @objc public init(headers: Foundation.NSDictionary)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DefaultMotionSensorsDevice {
  @objc deinit
}
extension AcessoBio.DefaultMotionSensorsDevice {
  @objc final public func startUpdate()
  @objc final public func stopUpdate()
}
public protocol UnicoSetupServicesProtocol {
  typealias Response = Swift.Result<AcessoBio.SDKConfigResponseDTOAdapter, AcessoBio.ErrorBio>
  typealias Completion = (Self.Response) -> Swift.Void
  func getTokenUnico(unicoSetupData: AcessoBio.UnicoSetupData, localeTypes: AcessoBio.LocaleTypes, completion: @escaping Self.Completion)
}
extension AcessoBio.ErrorBio : Swift.Error {
}
@objc public class UnicoCheckThemes : ObjectiveC.NSObject, AcessoBio.AcessoBioThemeDelegate {
  @objc public var defaultTheme: (any AcessoBio.AcessoBioThemeDelegate)!
  @objc public var acessoBioThemeDelegate: (any AcessoBio.AcessoBioThemeDelegate)!
  @objc public init(currentTheme: Any, defaultTheme: (any AcessoBio.AcessoBioThemeDelegate)!, completion: @escaping ((any AcessoBio.AcessoBioThemeDelegate)?, Swift.String?) -> Swift.Void)
  @objc public func getColorBackground() -> Any!
  @objc public func getColorBoxMessage() -> Any!
  @objc public func getColorTextMessage() -> Any!
  @objc public func getColorBackgroundTakePictureButton() -> Any!
  @objc public func getColorIconTakePictureButton() -> Any!
  @objc public func getColorBackgroundBottomDocument() -> Any!
  @objc public func getColorTextBottomDocument() -> Any!
  @objc public func getColorSilhouetteSuccess() -> Any!
  @objc public func getColorSilhouetteError() -> Any!
  @objc public func getColorSilhouetteNeutral() -> Any!
  @objc public func getProgressBarColor() -> Any!
  @objc public func getCancelButtonIconColor() -> Any!
  @objc deinit
}
extension AcessoBio.UnicoCheckThemes {
  @objc dynamic public func normalizeColor(currentColor: Any!, defaultColorTheme: Any!) -> UIKit.UIColor
  @objc dynamic public func isValidHexStringColor(currentColor: Swift.String) -> Swift.Bool
  @objc dynamic public func convertHexSringToUIColor(currentColor: Swift.String) -> UIKit.UIColor
}
@objc @_hasMissingDesignatedInitializers public class UnicoCheckLivenessAdapter : ObjectiveC.NSObject {
  public typealias PrepareCompletionSuccess = () -> Swift.Void
  public typealias PrepareCompletionFailure = (AcessoBio.ErrorBio) -> Swift.Void
  public typealias OpenCompletionSuccess = ([Swift.String : Any]) -> Swift.Void
  public typealias OpenCompletionFailure = (AcessoBio.ErrorBio) -> Swift.Void
  @objc convenience public init(viewController: UIKit.UIViewController, sdkToken: AcessoBio.SDKConfigResponseDTOAdapter, bioThemeDelegate: (any AcessoBio.AcessoBioThemeDelegate)?, isHomolog: Swift.Bool, hostKey: Swift.String)
  @objc public func prepareCamera(success: @escaping AcessoBio.UnicoCheckLivenessAdapter.PrepareCompletionSuccess, failure: @escaping AcessoBio.UnicoCheckLivenessAdapter.PrepareCompletionFailure)
  @objc public func openCamera(unicoSetup: AcessoBio.UnicoSetupData, timeoutInterval: Swift.Double, success: @escaping AcessoBio.UnicoCheckLivenessAdapter.OpenCompletionSuccess, failure: @escaping AcessoBio.UnicoCheckLivenessAdapter.OpenCompletionFailure)
  @objc public func getLivenessKeybody() -> Swift.String
  @objc deinit
}
extension AcessoBio.UnicoCheckLivenessAdapter : UnicoSdkLiveness.UnicoLivenessPrepareCameraDelegate {
  public func onCameraReady(unicoLivenessOpenCamera: any UnicoSdkLiveness.UnicoLivenessOpenCamera)
  public func onCameraError(livenessError: UnicoSdkLiveness.LivenessError)
}
extension AcessoBio.UnicoCheckLivenessAdapter : UnicoSdkLiveness.UnicoLivenessDelegate {
  public func onSuccess(livenessResult: any UnicoSdkLiveness.LivenessResult)
  public func onError(livenessError: UnicoSdkLiveness.LivenessError)
  public func onLoggerListener(_ liveness: (any UnicoSdkLiveness.LivenessLogger)?)
}
public class SDKPredictResponseDTO : Swift.Decodable {
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol SensorsWorker {
  @objc func startMotion()
  @objc @discardableResult
  func stopMotion() -> AcessoBio.DeviceBehaviorsDTO
}
@objc public protocol SensorsWorkerFactory {
  @objc func make() -> any AcessoBio.SensorsWorker
}
@objc @_hasMissingDesignatedInitializers final public class UnicoSetupData : ObjectiveC.NSObject {
  @objc final public func getHostKey() -> Swift.String?
  @objc deinit
}
extension AcessoBio.UnicoSetupData : Swift.Decodable {
  convenience public init(from decoder: any Swift.Decoder) throws
}
@objc final public class DefaultGetCameraResultUseCase : ObjectiveC.NSObject {
  @objc public init(key: Swift.String, keyBody: Swift.String, expires: Swift.Double, sessionToken: Swift.String?, isIntegrationCaptureFlow: Swift.Bool)
  @objc final public func execute(_ dataToSend: [Swift.String : Any], eventId: Swift.String, sessionId: Swift.String?, utcTimeNow: Swift.Double, uuid: Swift.String) -> AcessoBio.CaptureResult
  @objc deinit
}
@objc public protocol SensorsDevice {
  @objc func startUpdate()
  @objc func stopUpdate()
}
@objc @_hasMissingDesignatedInitializers public class DataLogger : ObjectiveC.NSObject {
  @objc public class func shared() -> AcessoBio.DataLogger
  public var sdkSessionId: Swift.String? {
    get
  }
  @objc public func commitBuild()
  @objc public func commitPrepareCamera()
  @objc public func commitOpenCamera(_ openCamera: AcessoBio.OpenCameraDTO)
  @objc public func commitSuccessCallback(successCallback: AcessoBio.SuccessCallbackDTO)
  @objc public func commitErrorCallback(errorCallback: AcessoBio.ErrorCallbackDTO)
  @objc public func commitCallback(_ callback: AcessoBio.CallbackDTO)
  @objc public func commitSessionTransactionsIds(_ sessionTransactions: [[Swift.String : Any]])
  @objc public func commitLiveness(_ liveness: AcessoBio.LivenessDTO?)
  @objc public func commitProvider(_ provider: AcessoBio.ProviderDTO)
  @objc public func send(_ saveAttempt: Swift.Bool, setupData: AcessoBio.UnicoSetupData, success: ((Swift.String, Swift.String?) -> Swift.Void)?, failure: ((AcessoBio.ErrorBio) -> Swift.Void)?)
  @objc deinit
}
public protocol CallbackWorker {
  func setCallbackName(callback: AcessoBio.CallbackDTO)
  func setErrorSdk(error: AcessoBio.ErrorCallbackDTO)
  func commit()
}
@_hasMissingDesignatedInitializers final public class DefaultCallbackWorker {
  @objc deinit
}
extension AcessoBio.DefaultCallbackWorker : AcessoBio.CallbackWorker {
  final public func setCallbackName(callback: AcessoBio.CallbackDTO)
  final public func setErrorSdk(error: AcessoBio.ErrorCallbackDTO)
  final public func commit()
}
@_inheritsConvenienceInitializers @objc public class ErrorHttp : AcessoBio.ErrorUnico {
  @objc override dynamic public init()
  @objc override public init(code: Swift.Int, message: Swift.String?, body: [Swift.String : Swift.String]?)
  @objc deinit
}
@objc public class UserInteractionDTO : ObjectiveC.NSObject {
  public init(timestamp: Swift.String? = nil, camera: Swift.String? = nil, cameraVendor: Swift.String? = nil, type: Swift.String? = nil, screenBrightness: Swift.Double? = nil, lightingSensor: Swift.Double? = nil, silhouette: AcessoBio.SilhouetteDTO? = nil, video: AcessoBio.VideoDTO? = nil, imageResolution: Swift.String? = nil, isCameraTypeChanged: Swift.Bool? = nil, inferenceTime: Swift.Int32? = nil, openCameraTime: Swift.Int32? = nil, captureUserTime: Swift.Int32? = nil, connections: AcessoBio.ConnectionsDTO? = nil, behaviors: AcessoBio.BehaviorsDTO? = nil, timers: AcessoBio.TimersDTO? = nil)
  @objc deinit
}
@objc public class VideoDTO : ObjectiveC.NSObject {
  @objc public init(width: Foundation.NSNumber? = nil, height: Foundation.NSNumber? = nil, aspectRatio: Foundation.NSNumber? = nil)
  public func toDomain() -> UnicoSdkLogger.Video
  @objc deinit
}
@objc public class SilhouetteDTO : ObjectiveC.NSObject {
  @objc public init(width: Foundation.NSNumber, height: Foundation.NSNumber)
  @objc deinit
}
@objc public class ConnectionsDTO : ObjectiveC.NSObject {
  @objc public init(type: Swift.String, rtt: Swift.String, effectiveType: Swift.String, downlink: Swift.String, ipAddress: Swift.String, ipPort: Swift.String)
  @objc deinit
}
@objc public class TimersDTO : ObjectiveC.NSObject {
  @objc public init(captureUserTime: Foundation.NSNumber, inferenceTime: Foundation.NSNumber, openCameraTime: Foundation.NSNumber)
  @objc deinit
}
@objc public class BehaviorsDTO : ObjectiveC.NSObject {
  @objc public init(face: AcessoBio.FaceBehaviorsDTO? = nil, device: AcessoBio.DeviceBehaviorsDTO? = nil)
  @objc deinit
}
@objc public class FaceBehaviorsDTO : ObjectiveC.NSObject {
  @objc public init(blinks: Foundation.NSNumber? = nil, pitch: [AcessoBio.SensorValuesDTO]? = nil, roll: [AcessoBio.SensorValuesDTO]? = nil, yaw: [AcessoBio.SensorValuesDTO]? = nil)
  public func toDomain() -> UnicoSdkLogger.FaceBehavior
  @objc deinit
}
@objc public class DeviceBehaviorsDTO : ObjectiveC.NSObject {
  public init(accelerometers: AcessoBio.AccelerometerDeviceBehaviorDTO? = nil, pitch: [AcessoBio.SensorValuesDTO]? = nil, roll: [AcessoBio.SensorValuesDTO]? = nil, yaw: [AcessoBio.SensorValuesDTO]? = nil)
  public func toDomain() -> UnicoSdkLogger.DeviceBehavior
  @objc deinit
}
@objc public class AccelerometerDeviceBehaviorDTO : ObjectiveC.NSObject {
  @objc public init(x: [AcessoBio.SensorValuesDTO], y: [AcessoBio.SensorValuesDTO], z: [AcessoBio.SensorValuesDTO])
  public func toDomain() -> UnicoSdkLogger.AccelerometerDeviceBehavior
  @objc deinit
}
@objc public class SensorValuesDTO : ObjectiveC.NSObject {
  @objc public init(value: Swift.Double)
  public init(timestamp: Swift.Int64, value: Swift.Double)
  @objc deinit
}
@objc public protocol ProviderFactory {
  @objc func create() -> any AcessoBio.CreateProviderUseCase
}
@objc @_hasMissingDesignatedInitializers final public class DefaultProviderFactory : ObjectiveC.NSObject {
  @objc public enum Source : Swift.Int {
    case memory
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
extension AcessoBio.DefaultProviderFactory : AcessoBio.ProviderFactory {
  @objc final public func create() -> any AcessoBio.CreateProviderUseCase
}
public protocol Cancellable {
  func cancel()
}
@objc @_hasMissingDesignatedInitializers public class SDKConfigResponseDTOAdapter : ObjectiveC.NSObject {
  @objc public var facetecSessionToken: Swift.String? {
    @objc get
  }
  @objc public var geolocationEnabled: Swift.Bool {
    @objc get
  }
  @objc public var key: Swift.String {
    @objc get
  }
  @objc public var keyBody: Swift.String {
    @objc get
  }
  @objc public var enableLogo: Swift.Bool {
    @objc get
  }
  @objc public var expires: Swift.Double {
    @objc get
  }
  @objc public var isIntegrationCaptureFlow: Swift.Bool {
    @objc get
  }
  @objc public var maxAttempts: Swift.Int {
    @objc get
  }
  @objc public var isLiveness: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class UnicoNetworkingModule : ObjectiveC.NSObject {
  @objc public func isConnectedToNetwork() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol Factories {
  @objc func createProviderFactory(source: AcessoBio.DefaultProviderFactory.Source) -> any AcessoBio.CreateProviderUseCase
  @objc func makeSensorsWorkerFactory() -> any AcessoBio.SensorsWorkerFactory
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FactoriesContainer : ObjectiveC.NSObject, AcessoBio.Factories {
  @objc public class func sharedContainer() -> AcessoBio.FactoriesContainer
  @objc public func createProviderFactory(source: AcessoBio.DefaultProviderFactory.Source) -> any AcessoBio.CreateProviderUseCase
  @objc public func makeSensorsWorkerFactory() -> any AcessoBio.SensorsWorkerFactory
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class DocumentResult : AcessoBio.CaptureResult {
  @objc override public init(base64: Swift.String!, encrypted: Swift.String!)
  @objc deinit
}
@objc public protocol UnicoSetupProtocol {
  @objc func setupSDK(unicoSetupData: AcessoBio.UnicoSetupData, localeTypes: AcessoBio.LocaleTypes, completion: @escaping (AcessoBio.ErrorBio?) -> Swift.Void)
  @objc func getSdkTokenObject() -> AcessoBio.SDKConfigResponseDTOAdapter?
  @objc var isHomolog: Swift.Bool { get }
}
@objc @_inheritsConvenienceInitializers public class UnicoSetup : ObjectiveC.NSObject, AcessoBio.UnicoSetupProtocol {
  @objc public var isHomolog: Swift.Bool
  @objc public func setupSDK(unicoSetupData: AcessoBio.UnicoSetupData, localeTypes: AcessoBio.LocaleTypes, completion: @escaping (AcessoBio.ErrorBio?) -> Swift.Void)
  @objc public func getSdkTokenObject() -> AcessoBio.SDKConfigResponseDTOAdapter?
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol AcessoBioConfigDataSource {
  @objc func getBundleIdentifier() -> Swift.String
  @objc func getHostKey() -> Swift.String
  @objc optional func getProjectNumber() -> Swift.String
  @objc optional func getProjectId() -> Swift.String
  @objc optional func getMobileSdkAppId() -> Swift.String
  @objc optional func getHostInfo() -> Swift.String
}
@objc public class CallbackDTO : ObjectiveC.NSObject {
  @objc public init(callback: Swift.String? = nil, attempts: AcessoBio.AttemptsDTO? = nil, totalTime: Foundation.NSNumber? = nil, geolocation: AcessoBio.GeolocationDTO? = nil, deviceBehavior: AcessoBio.DeviceBehaviorsDTO? = nil)
  @objc deinit
}
@objc public class AttemptsDTO : ObjectiveC.NSObject {
  public init(uuid: Swift.String? = nil)
  @objc deinit
}
@objc public class SuccessCallbackDTO : AcessoBio.CallbackDTO {
  @objc public init(callback: Swift.String? = nil, attempts: AcessoBio.AttemptsDTO? = nil, totalTime: Foundation.NSNumber? = nil, jwtWeight: Foundation.NSNumber? = nil)
  @objc deinit
}
@objc public class ErrorCallbackDTO : AcessoBio.CallbackDTO {
  @objc public init(code: Foundation.NSNumber? = nil, title: Swift.String? = nil, message: Swift.String? = nil)
  @objc deinit
}
@objc public class GeolocationDTO : ObjectiveC.NSObject {
  @objc public init(lat: Foundation.NSNumber?, lng: Foundation.NSNumber?, alt: Foundation.NSNumber?, precision: Foundation.NSNumber?, city: Swift.String?, uf: Swift.String?, country: Swift.String?, postalCode: Swift.String?, address: Swift.String?, gpsFlag: Swift.String?, mode: Swift.String?)
  @objc deinit
}
@objc public class UnicoJsonLoad : ObjectiveC.NSObject {
  @objc public init(bundle: Foundation.Bundle?)
  @objc public func loadJson(jsonName: Swift.String, completion: @escaping (AcessoBio.UnicoSetupData?, AcessoBio.ErrorBio?) -> Swift.Void)
  @objc deinit
}
@objc public class OpenCameraDTO : ObjectiveC.NSObject {
  @objc public init(captureType: Swift.String? = nil, cameraType: Swift.String? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DefaultSessionTransactionsWorker {
  @objc deinit
}
@objc public class UnicoLogoImageView : ObjectiveC.NSObject {
  @objc public init(enableLogo: Swift.Bool)
  @objc public enum LogoType : Swift.Int {
    case footer
    case silhouette
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public func addLogo(location: CoreFoundation.CGPoint, type: AcessoBio.UnicoLogoImageView.LogoType) -> UIKit.UIImageView!
  @objc public func removeLogo()
  @objc deinit
}
@objc public class ProviderDTO : ObjectiveC.NSObject {
  public init(name: Swift.String, type: Swift.String, version: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class SelfieResult : AcessoBio.CaptureResult {
  @objc override public init(base64: Swift.String!, encrypted: Swift.String!)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class UnicoDefaultTheme : ObjectiveC.NSObject, AcessoBio.AcessoBioThemeDelegate {
  @objc public func getColorBackground() -> Any!
  @objc public func getColorBoxMessage() -> Any!
  @objc public func getColorTextMessage() -> Any!
  @objc public func getColorBackgroundTakePictureButton() -> Any!
  @objc public func getColorIconTakePictureButton() -> Any!
  @objc public func getColorBackgroundBottomDocument() -> Any!
  @objc public func getColorTextBottomDocument() -> Any!
  @objc public func getColorSilhouetteSuccess() -> Any!
  @objc public func getColorSilhouetteError() -> Any!
  @objc public func getColorSilhouetteNeutral() -> Any!
  @objc public func getProgressBarColor() -> Any!
  @objc public func getCancelButtonIconColor() -> Any!
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol UnicoFaceCameraInteractorInput {
  @objc func startCapture()
  @objc func stopCaptureAndSendData(screenBrightness: CoreFoundation.CGFloat, isCameraTypeChanged: Foundation.NSNumber, imageResolution: Swift.String, faceBehavior: AcessoBio.FaceBehaviorsDTO, video: AcessoBio.VideoDTO, timers: AcessoBio.TimersDTO)
}
@objc final public class UnicoFaceCameraInteractor : ObjectiveC.NSObject {
  @objc public init(presenter: any AcessoBio.UnicoFaceCameraPresenterInput)
  @objc deinit
}
extension AcessoBio.UnicoFaceCameraInteractor : AcessoBio.UnicoFaceCameraInteractorInput {
  @objc final public func startCapture()
  @objc final public func stopCaptureAndSendData(screenBrightness: CoreFoundation.CGFloat, isCameraTypeChanged: Foundation.NSNumber, imageResolution: Swift.String, faceBehavior: AcessoBio.FaceBehaviorsDTO, video: AcessoBio.VideoDTO, timers: AcessoBio.TimersDTO)
}
@objc @_inheritsConvenienceInitializers public class UnicoErrors : ObjectiveC.NSObject {
  @objc public static func getUnicoError(enumerated: AcessoBio.UnicoEnumsIErrors, info: Swift.String?) -> AcessoBio.ErrorBio
  @objc public static func getCompleteException(exception: Foundation.NSException) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class UnicoTelemetry : ObjectiveC.NSObject {
  @objc public static func getInfo() -> Foundation.NSDictionary!
  @objc public static func setNewInfo(key: Swift.String!, value: Any)
  @objc public static func clear()
  @objc override dynamic public init()
  @objc deinit
}
@objc public class CaptureResult : ObjectiveC.NSObject {
  @objc public var base64: Swift.String!
  @objc public var encrypted: Swift.String!
  @objc public init(base64: Swift.String!, encrypted: Swift.String!)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DefaultLoggerFactory {
  @objc deinit
}
@objc public protocol UnicoCameraMetadataOutputDelegate : AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
  @objc var rolls: [AcessoBio.SensorValuesDTO]? { get }
  @objc var yaws: [AcessoBio.SensorValuesDTO]? { get }
  @objc var pitches: [AcessoBio.SensorValuesDTO]? { get }
  @objc var yaw: Foundation.NSNumber? { get }
  @objc var endDate: Foundation.Date? { get }
}
@_inheritsConvenienceInitializers @objc final public class UnicoCameraMetadataOutput : ObjectiveC.NSObject, AcessoBio.UnicoCameraMetadataOutputDelegate {
  @objc final public var rolls: [AcessoBio.SensorValuesDTO]?
  @objc final public var yaws: [AcessoBio.SensorValuesDTO]?
  @objc final public var pitches: [AcessoBio.SensorValuesDTO]?
  @objc final public var yaw: Foundation.NSNumber?
  @objc final public var endDate: Foundation.Date?
  @objc final public func metadataOutput(_ output: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from connection: AVFoundation.AVCaptureConnection)
  @objc override dynamic public init()
  @objc deinit
}
extension AcessoBio.CreateProviderError : Swift.Equatable {}
extension AcessoBio.CreateProviderError : Swift.Hashable {}
extension AcessoBio.CreateProviderError : Swift.RawRepresentable {}
extension AcessoBio.UnicoEnumsIErrors : Swift.Equatable {}
extension AcessoBio.UnicoEnumsIErrors : Swift.Hashable {}
extension AcessoBio.UnicoEnumsIErrors : Swift.RawRepresentable {}
extension AcessoBio.DefaultMotionSensorsDevice : AcessoBio.SensorsDevice {}
extension AcessoBio.DefaultProviderFactory.Source : Swift.Equatable {}
extension AcessoBio.DefaultProviderFactory.Source : Swift.Hashable {}
extension AcessoBio.DefaultProviderFactory.Source : Swift.RawRepresentable {}
extension AcessoBio.UnicoLogoImageView.LogoType : Swift.Equatable {}
extension AcessoBio.UnicoLogoImageView.LogoType : Swift.Hashable {}
extension AcessoBio.UnicoLogoImageView.LogoType : Swift.RawRepresentable {}
