// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name UnicoSdkBase
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreLocation.CLLocation
import CoreLocation
import CoreLocation/*.CLAuthorizationStatus*/
import CoreLocation/*.CLLocation*/
import CoreLocation/*.CLLocationManager*/
import CoreLocation/*.CLLocationManagerDelegate*/
import Foundation
import Swift
import UIKit
import UnicoSdkPlugins
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol GeoLocation {
  func start(handler: @escaping (Swift.Result<[CoreLocation.CLLocation], UnicoSdkBase.GeoLocationError>) -> Swift.Void)
  func stop()
}
public protocol FeatureFlagDataSource {
  func getValue(feature: any UnicoSdkBase.FeaturesRepresentable, defaultValue: Swift.Bool) -> Swift.Bool
}
public enum FeatureFlagDataSourceFetcherError : Swift.Error, Swift.Equatable {
  case noFlagsAvailable
  case networkFailed
  case decryptFailed
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: UnicoSdkBase.FeatureFlagDataSourceFetcherError, b: UnicoSdkBase.FeatureFlagDataSourceFetcherError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol FeatureFlagDataSourceFetcher {
  typealias CompletionResult = Swift.Result<Swift.Void, UnicoSdkBase.FeatureFlagDataSourceFetcherError>
  typealias Completion = ((Self.CompletionResult) -> Swift.Void)
  func fetchFlags(headers: [Swift.String : Swift.String], request: [Swift.String : Any], dataTransferService: any UnicoSdkBase.DataTransferService, decryptor: any UnicoSdkBase.UnicoDecrypt, completion: @escaping Self.Completion)
}
extension UnicoSdkBase.FeatureFlagDataSource {
  public func getValue(feature: any UnicoSdkBase.FeaturesRepresentable) -> Swift.Bool
}
public protocol GeoIP {
  var ip: Swift.String { get }
}
public protocol NetworkConfigurable {
  var baseURL: Foundation.URL { get }
  var headers: [Swift.String : Swift.String] { get }
  var queryParameters: [Swift.String : Swift.String] { get }
}
public struct ApiDataNetworkConfig : UnicoSdkBase.NetworkConfigurable {
  public let baseURL: Foundation.URL
  public let headers: [Swift.String : Swift.String]
  public let queryParameters: [Swift.String : Swift.String]
  public init(baseURL: Foundation.URL, headers: [Swift.String : Swift.String] = [:], queryParameters: [Swift.String : Swift.String] = [:])
}
public protocol UnicoDecrypt {
  func decrypt(encoded: Swift.String?) -> Swift.String?
}
public class CryptedJSONResponseDecoder : UnicoSdkBase.ResponseDecoder {
  public init(dateDecodingStrategy: Foundation.JSONDecoder.DateDecodingStrategy = .deferredToDate, decrypt: any UnicoSdkBase.UnicoDecrypt)
  public func decode<T>(_ data: Foundation.Data) throws -> T where T : Swift.Decodable
  @objc deinit
}
public class API {
  public var defaultService: any UnicoSdkBase.DataTransferService {
    get
    set
  }
  public var devService: any UnicoSdkBase.DataTransferService {
    get
    set
  }
  public var uatService: any UnicoSdkBase.DataTransferService {
    get
    set
  }
  public var prodService: any UnicoSdkBase.DataTransferService {
    get
    set
  }
  public init()
  @objc deinit
}
public protocol GetGeoIP {
  func getGeoIP(completion: @escaping (Swift.Result<any UnicoSdkBase.GeoIP, any Swift.Error>) -> Swift.Void)
}
public struct CryptedResponseDTO<T> where T : Swift.Decodable {
}
extension UnicoSdkBase.CryptedResponseDTO : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension UnicoSdkBase.CryptedResponseDTO {
  public func decrypt(using decryptor: any UnicoSdkBase.UnicoDecrypt) throws -> T
}
@_hasMissingDesignatedInitializers final public class DefaultAESUnicoDecrypt : UnicoSdkBase.UnicoDecrypt {
  final public func decrypt(encoded: Swift.String?) -> Swift.String?
  @objc deinit
}
extension UnicoSdkBase.DefaultAESUnicoDecrypt {
  public static func makeHostDecrypt(keyData: [Swift.UInt8], ivData: [Swift.UInt8]) -> any UnicoSdkBase.UnicoDecrypt
  public static func makeTokenDecrypt(keyData: [Swift.UInt8], ivData: [Swift.UInt8]) -> any UnicoSdkBase.UnicoDecrypt
}
extension UnicoSdkBase.DefaultAESUnicoDecrypt {
  public static func makeWithCBCBlockMode(keyData: Swift.String, ivData: Swift.String) -> any UnicoSdkBase.UnicoDecrypt
  public static func makeWithGCMBlockMode(keyData: Swift.String, ivData: Swift.String) -> any UnicoSdkBase.UnicoDecrypt
}
public protocol Token {
  var token: Swift.String { get }
  var sendLogIsEnable: Swift.Bool { get }
  var geolocationsLogsIsEnabled: Swift.Bool? { get }
  var isMigrated: Swift.Bool? { get }
  var validateAt: Foundation.Date { get }
  var isValid: Swift.Bool { get }
  var versionDataActions: [UnicoSdkBase.TokenVersionDataAction]? { get }
}
public enum TokenVersionDataAction : Swift.Equatable {
  case consoleLog(warningMessage: Swift.String)
  public static func == (a: UnicoSdkBase.TokenVersionDataAction, b: UnicoSdkBase.TokenVersionDataAction) -> Swift.Bool
}
extension UnicoSdkBase.Token {
  public var isValid: Swift.Bool {
    get
  }
}
public enum NetworkError : Swift.Error {
  case error(statusCode: Swift.Int, data: Foundation.Data?)
  case notConnected
  case cancelled
  case generic(any Swift.Error)
  case urlGeneration
}
public protocol NetworkCancellable {
  func cancel()
}
extension Foundation.URLSessionTask : UnicoSdkBase.NetworkCancellable {
}
public protocol NetworkService {
  typealias CompletionHandler = (Swift.Result<Foundation.Data?, UnicoSdkBase.NetworkError>) -> Swift.Void
  func request(endpoint: any UnicoSdkBase.Requestable, completion: @escaping Self.CompletionHandler) -> (any UnicoSdkBase.NetworkCancellable)?
}
public protocol NetworkSessionManager {
  typealias CompletionHandler = (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void
  func request(_ request: Foundation.URLRequest, completion: @escaping Self.CompletionHandler) -> any UnicoSdkBase.NetworkCancellable
}
public protocol NetworkErrorLogger {
  func log(request: Foundation.URLRequest)
  func log(responseData data: Foundation.Data?, response: Foundation.URLResponse?)
  func log(error: any Swift.Error)
}
final public class DefaultNetworkService {
  public init(config: any UnicoSdkBase.NetworkConfigurable, sessionManager: any UnicoSdkBase.NetworkSessionManager = DefaultNetworkSessionManager(), logger: any UnicoSdkBase.NetworkErrorLogger = DefaultNetworkErrorLogger())
  @objc deinit
}
extension UnicoSdkBase.DefaultNetworkService : UnicoSdkBase.NetworkService {
  final public func request(endpoint: any UnicoSdkBase.Requestable, completion: @escaping UnicoSdkBase.DefaultNetworkService.CompletionHandler) -> (any UnicoSdkBase.NetworkCancellable)?
}
public class DefaultNetworkSessionManager : UnicoSdkBase.NetworkSessionManager {
  public init()
  public func request(_ request: Foundation.URLRequest, completion: @escaping UnicoSdkBase.DefaultNetworkSessionManager.CompletionHandler) -> any UnicoSdkBase.NetworkCancellable
  @objc deinit
}
final public class DefaultNetworkErrorLogger : UnicoSdkBase.NetworkErrorLogger {
  public init()
  final public func log(request: Foundation.URLRequest)
  final public func log(responseData data: Foundation.Data?, response: Foundation.URLResponse?)
  final public func log(error: any Swift.Error)
  @objc deinit
}
extension UnicoSdkBase.NetworkError {
  public var isNotFoundError: Swift.Bool {
    get
  }
  public func hasStatusCode(_ codeError: Swift.Int) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class Base {
  final public let getToken: any UnicoSdkBase.GetToken
  final public let getGeoIP: any UnicoSdkBase.GetGeoIP
  final public let geoLocation: any UnicoSdkBase.GeoLocation
  final public let getDeviceInfo: any UnicoSdkBase.GetDeviceInfo
  convenience public init(dataTransferService: any UnicoSdkBase.DataTransferService, locationManager: CoreLocation.CLLocationManager = CLLocationManager(), device: UIKit.UIDevice = UIDevice.current, keyData: Swift.String, ivData: Swift.String)
  @objc deinit
}
extension Swift.Optional {
  public enum UnwrapOptionalError : Swift.Error {
    case unwrapFailed
    public static func == (a: Swift.Optional<Wrapped>.UnwrapOptionalError, b: Swift.Optional<Wrapped>.UnwrapOptionalError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func unwrapOrThrow() throws -> Wrapped
}
extension Swift.Optional where Wrapped == Swift.String {
  public func unwrapOrThrow() throws -> Wrapped
}
extension Swift.String {
  public static var newUUID: Swift.String {
    get
  }
  public static func randomString(length: Swift.Int) -> Swift.String
}
@_hasMissingDesignatedInitializers final public class DefaultFeatureFlagDataSource : UnicoSdkBase.FeatureFlagDataSourceFetcher, UnicoSdkBase.FeatureFlagDataSource {
  public static var shared: UnicoSdkBase.DefaultFeatureFlagDataSource
  final public func fetchFlags(headers: [Swift.String : Swift.String], request: [Swift.String : Any], dataTransferService: any UnicoSdkBase.DataTransferService, decryptor: any UnicoSdkBase.UnicoDecrypt, completion: @escaping UnicoSdkBase.DefaultFeatureFlagDataSource.Completion)
  final public func getValue(feature: any UnicoSdkBase.FeaturesRepresentable, defaultValue: Swift.Bool) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultGeoLocationFactory {
  @objc deinit
}
public protocol FeaturesRepresentable {
  static var hasFeatures: Swift.Bool { get }
  static var allFeatures: [Self] { get }
  var rawValue: Swift.String { get }
}
public enum Features : Swift.String, Swift.CaseIterable, Swift.Encodable, Swift.CodingKey, Swift.Equatable {
  case initDeviceProfiling
  case sendRaspOnConfig
  case sdkSessionIdOnSubmit
  case endpointConfigV2
  case versionSupport
  case shortClientJwt
  case sendAuditImages
  case none
  public init?(rawValue: Swift.String)
  public init?(stringValue: Swift.String)
  public init?(intValue: Swift.Int)
  public typealias AllCases = [UnicoSdkBase.Features]
  public typealias RawValue = Swift.String
  public static var allCases: [UnicoSdkBase.Features] {
    get
  }
  public var intValue: Swift.Int? {
    get
  }
  public var rawValue: Swift.String {
    get
  }
  public var stringValue: Swift.String {
    get
  }
}
extension UnicoSdkBase.Features : UnicoSdkBase.FeaturesRepresentable {
  public static var allFeatures: [UnicoSdkBase.Features] {
    get
  }
  public static var hasFeatures: Swift.Bool {
    get
  }
}
public struct FeatureFlagRequestDTO : Swift.Encodable {
  public init(flagListKeys: [UnicoSdkBase.Features])
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RequestHeadersDTO {
  public init(projectVersion: Swift.String, projectName: Swift.String, platform: Swift.String = "IOS", dependencies: UnicoSdkBase.Dependencies? = nil, apiKey: Swift.String? = nil)
  public var serialize: [Swift.String : Swift.String] {
    get
  }
}
public struct Dependencies : Swift.Codable {
  public init(dependencies: [UnicoSdkBase.Dependencies.Dependency])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension UnicoSdkBase.Dependencies {
  public struct Dependency : Swift.Codable {
    public init(name: Swift.String, version: Swift.String)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public enum GeoLocationError : Swift.Error, Swift.Equatable {
  case usageDescriptionPlistNotAvailable
  case locationFailed(locationError: any Swift.Error)
  public static func == (lhsError: UnicoSdkBase.GeoLocationError, rhsError: UnicoSdkBase.GeoLocationError) -> Swift.Bool
}
public protocol GetToken {
  func getToken(headers: UnicoSdkBase.RequestHeadersDTO, completion: @escaping (Swift.Result<any UnicoSdkBase.Token, any Swift.Error>) -> Swift.Void)
}
public protocol Cancellable {
  func cancel()
}
public protocol Serializable {
  var serialize: [Swift.String : Any] { get }
}
public protocol DeviceInfo {
  var id: Swift.String { get }
  var model: Swift.String { get }
  var vendor: Swift.String { get }
  var os: Swift.String { get }
  var api: Swift.String { get }
  var systemPatch: Swift.String { get }
  var kernelVersion: Swift.String { get }
  var usbPlugged: Swift.Bool { get }
  func isEqual(to other: any UnicoSdkBase.DeviceInfo) -> Swift.Bool
}
public protocol GetDeviceInfo {
  func device() -> any UnicoSdkBase.DeviceInfo
}
public func printIfDebug(_ message: Any)
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static func modelName() -> Swift.String
}
public class JSONResponseDecoder : UnicoSdkBase.ResponseDecoder {
  public init(dateDecodingStrategy: Foundation.JSONDecoder.DateDecodingStrategy = .deferredToDate)
  public func decode<T>(_ data: Foundation.Data) throws -> T where T : Swift.Decodable
  @objc deinit
}
public enum DataTransferError : Swift.Error {
  case noResponse
  case parsing(any Swift.Error)
  case networkFailure(UnicoSdkBase.NetworkError)
  case resolvedNetworkFailure(any Swift.Error)
}
public protocol DataTransferService {
  typealias CompletionHandler<T> = (Swift.Result<T, UnicoSdkBase.DataTransferError>) -> Swift.Void
  @discardableResult
  func request<T, E>(with endpoint: E, completion: @escaping Self.CompletionHandler<T>) -> (any UnicoSdkBase.NetworkCancellable)? where T : Swift.Decodable, T == E.Response, E : UnicoSdkBase.ResponseRequestable
  @discardableResult
  func request<E>(with endpoint: E, completion: @escaping Self.CompletionHandler<Swift.Void>) -> (any UnicoSdkBase.NetworkCancellable)? where E : UnicoSdkBase.ResponseRequestable, E.Response == ()
}
public protocol DataTransferErrorResolver {
  func resolve(error: UnicoSdkBase.NetworkError) -> any Swift.Error
}
public protocol ResponseDecoder {
  func decode<T>(_ data: Foundation.Data) throws -> T where T : Swift.Decodable
}
public protocol DataTransferErrorLogger {
  func log(error: any Swift.Error)
}
final public class DefaultDataTransferService {
  public init(with networkService: any UnicoSdkBase.NetworkService, errorResolver: any UnicoSdkBase.DataTransferErrorResolver = DefaultDataTransferErrorResolver(), errorLogger: any UnicoSdkBase.DataTransferErrorLogger = DefaultDataTransferErrorLogger())
  @objc deinit
}
extension UnicoSdkBase.DefaultDataTransferService : UnicoSdkBase.DataTransferService {
  final public func request<T, E>(with endpoint: E, completion: @escaping UnicoSdkBase.DefaultDataTransferService.CompletionHandler<T>) -> (any UnicoSdkBase.NetworkCancellable)? where T : Swift.Decodable, T == E.Response, E : UnicoSdkBase.ResponseRequestable
  final public func request<E>(with endpoint: E, completion: @escaping UnicoSdkBase.DefaultDataTransferService.CompletionHandler<Swift.Void>) -> (any UnicoSdkBase.NetworkCancellable)? where E : UnicoSdkBase.ResponseRequestable, E.Response == ()
}
final public class DefaultDataTransferErrorLogger : UnicoSdkBase.DataTransferErrorLogger {
  public init()
  final public func log(error: any Swift.Error)
  @objc deinit
}
public class DefaultDataTransferErrorResolver : UnicoSdkBase.DataTransferErrorResolver {
  public init()
  public func resolve(error: UnicoSdkBase.NetworkError) -> any Swift.Error
  @objc deinit
}
public class RawDataResponseDecoder : UnicoSdkBase.ResponseDecoder {
  public init()
  public func decode<T>(_ data: Foundation.Data) throws -> T where T : Swift.Decodable
  @objc deinit
}
public enum HTTPMethodType : Swift.String {
  case get
  case head
  case post
  case put
  case patch
  case delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum BodyEncoding {
  case jsonSerializationData
  case stringEncodingAscii
  public static func == (a: UnicoSdkBase.BodyEncoding, b: UnicoSdkBase.BodyEncoding) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
open class Endpoint<R> : UnicoSdkBase.ResponseRequestable {
  public typealias Response = R
  final public let path: Swift.String
  final public let isFullPath: Swift.Bool
  final public let method: UnicoSdkBase.HTTPMethodType
  final public let headerParameters: [Swift.String : Swift.String]
  final public let queryParametersEncodable: (any Swift.Encodable)?
  final public let queryParameters: [Swift.String : Any]
  final public let bodyParametersEncodable: (any Swift.Encodable)?
  final public let bodyParameters: [Swift.String : Any]
  final public let bodyEncoding: UnicoSdkBase.BodyEncoding
  final public let responseDecoder: any UnicoSdkBase.ResponseDecoder
  final public let timeoutInterval: Foundation.TimeInterval
  public init(path: Swift.String, isFullPath: Swift.Bool = false, method: UnicoSdkBase.HTTPMethodType, headerParameters: [Swift.String : Swift.String] = [:], queryParametersEncodable: (any Swift.Encodable)? = nil, queryParameters: [Swift.String : Any] = [:], bodyParametersEncodable: (any Swift.Encodable)? = nil, bodyParameters: [Swift.String : Any] = [:], bodyEncoding: UnicoSdkBase.BodyEncoding = .jsonSerializationData, responseDecoder: any UnicoSdkBase.ResponseDecoder = JSONResponseDecoder(), timeoutInterval: Foundation.TimeInterval = 60)
  @objc deinit
}
public protocol Requestable {
  var path: Swift.String { get }
  var isFullPath: Swift.Bool { get }
  var method: UnicoSdkBase.HTTPMethodType { get }
  var headerParameters: [Swift.String : Swift.String] { get }
  var queryParametersEncodable: (any Swift.Encodable)? { get }
  var queryParameters: [Swift.String : Any] { get }
  var bodyParametersEncodable: (any Swift.Encodable)? { get }
  var bodyParameters: [Swift.String : Any] { get }
  var bodyEncoding: UnicoSdkBase.BodyEncoding { get }
  var timeoutInterval: Foundation.TimeInterval { get }
  func urlRequest(with networkConfig: any UnicoSdkBase.NetworkConfigurable) throws -> Foundation.URLRequest
}
public protocol ResponseRequestable : UnicoSdkBase.Requestable {
  associatedtype Response
  var responseDecoder: any UnicoSdkBase.ResponseDecoder { get }
}
extension UnicoSdkBase.Requestable {
  public func urlRequest(with config: any UnicoSdkBase.NetworkConfigurable) throws -> Foundation.URLRequest
}
extension UnicoSdkBase.FeatureFlagDataSourceFetcherError : Swift.Hashable {}
extension Swift.Optional.UnwrapOptionalError : Swift.Equatable {}
extension Swift.Optional.UnwrapOptionalError : Swift.Hashable {}
extension UnicoSdkBase.Features : Swift.Hashable {}
extension UnicoSdkBase.Features : Swift.RawRepresentable {}
extension UnicoSdkBase.HTTPMethodType : Swift.Equatable {}
extension UnicoSdkBase.HTTPMethodType : Swift.Hashable {}
extension UnicoSdkBase.HTTPMethodType : Swift.RawRepresentable {}
extension UnicoSdkBase.BodyEncoding : Swift.Equatable {}
extension UnicoSdkBase.BodyEncoding : Swift.Hashable {}
