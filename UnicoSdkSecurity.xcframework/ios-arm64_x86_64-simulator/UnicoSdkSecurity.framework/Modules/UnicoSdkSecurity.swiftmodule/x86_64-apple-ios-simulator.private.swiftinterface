// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name UnicoSdkSecurity
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreLocation
import UnicoSdkSecurity.DeviceInfo_Private
import Foundation
import UnicoSdkSecurity.HSE_Private
import Swift
import UnicoSdkBase
@_exported import UnicoSdkSecurity
import _Concurrency
import _StringProcessing
public protocol DeviceInfo {
  var deviceId: Swift.String { get }
  var deviceModel: Swift.String { get }
  var ip: Swift.String? { get }
  var geolocation: CoreLocation.CLLocation? { get }
}
public enum UnicoSecurityErrors : Swift.Int {
  case licenseNotFound
  case sdkNotInitialized
  case bundleDifferentFromGeneratedLicense
  case jailbreakCompromissedInSimulator
  case optionalUnwrapFailed
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension UnicoSdkSecurity.UnicoSecurityErrors : Swift.Error {
}
public enum DeviceInfoError : Swift.Error {
  case authenticationFailed
  case networkFailed
  case securityResultFailed
  public static func == (a: UnicoSdkSecurity.DeviceInfoError, b: UnicoSdkSecurity.DeviceInfoError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class UnicoSecuritySDK {
  convenience public init(sdkKey: Swift.String, originBundleId: Swift.String? = nil, env: UnicoSdkSecurity.Env = .production)
  final public func getSecurityResult() throws -> UnicoSdkSecurity.SecurityResult
  final public func getDeviceId(completionHandler: @escaping (Swift.Result<Swift.String, UnicoSdkSecurity.DeviceInfoError>) -> Swift.Void)
  final public func getDeviceInfo(completionHandler: @escaping (Swift.Result<UnicoSdkSecurity.DeviceInfo, UnicoSdkSecurity.DeviceInfoError>) -> Swift.Void)
  @objc deinit
}
public enum Env {
  case custom(service: UnicoSdkBase.DataTransferService)
  case production
}
public protocol SecurityResult {
  var jailBreak: Swift.Bool? { get }
  var simulator: Swift.Bool? { get }
  var debugger: Swift.Bool? { get }
  var deviceInfo: Swift.String? { get }
}
extension UnicoSdkSecurity.UnicoSecurityErrors : Swift.Equatable {}
extension UnicoSdkSecurity.UnicoSecurityErrors : Swift.Hashable {}
extension UnicoSdkSecurity.UnicoSecurityErrors : Swift.RawRepresentable {}
extension UnicoSdkSecurity.DeviceInfoError : Swift.Equatable {}
extension UnicoSdkSecurity.DeviceInfoError : Swift.Hashable {}
