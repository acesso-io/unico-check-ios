// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ShieldFraud
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import AdSupport
import AppTrackingTransparency
import SystemConfiguration.CaptiveNetwork
import CommonCrypto
import Contacts
import CoreLocation
import CoreMotion
import CoreTelephony
import Darwin
import Foundation
import LocalAuthentication
import MachO
import MessageUI
import Network
import Photos
import Security
@_exported import ShieldFraud
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
extension Swift.Array {
  public var jsonString: Swift.String {
    get
  }
}
@objc @objcMembers public class BlockedDialog : ObjectiveC.NSObject {
  @objc final public let title: Swift.String
  @objc final public let body: Swift.String
  @objc public init(title: Swift.String, body: Swift.String)
  @objc deinit
}
public enum CaptchaType {
  case text_captcha
  case math_challenge
  public static func == (a: ShieldFraud.CaptchaType, b: ShieldFraud.CaptchaType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.Date {
  public func convertCurrentTimeInMS() -> Swift.Int64
}
@objc public protocol DeviceShieldCallback {
  @objc func didSuccess(result: [Swift.String : Any])
  @objc func didError(error: Foundation.NSError)
}
@objc public protocol DeviceResultStateDelegate {
  @objc func isReady()
}
@objc public enum Environment : Swift.Int {
  case prod, dev, stag
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LogLevel : Swift.Int {
  case debug = 3
  case info = 2
  case none = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class HMACUtils : ObjectiveC.NSObject {
  @objc public static func getShieldSignature(withSiteId siteId: Swift.String, secretKey: Swift.String, timestamp: Swift.String) -> Swift.String
  @objc public static func digest(toHash: Swift.String, screctKey: Swift.String) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers final public class Configuration : ObjectiveC.NSObject {
  @objc final public var environment: ShieldFraud.Environment
  @objc final public let siteId: Swift.String
  @objc final public var logLevel: ShieldFraud.LogLevel
  @objc final public var deviceShieldCallback: (any ShieldFraud.DeviceShieldCallback)?
  @objc final public var enableMocking: Swift.Bool
  @objc final public var partnerId: Swift.String?
  @objc final public var debugKey: Swift.String?
  @objc final public let secretKey: Swift.String
  @objc final public var defaultBlockedDialog: ShieldFraud.BlockedDialog?
  @objc final public var modules: [any ShieldFraud.ShieldModule]?
  @objc final public var userID: Swift.String?
  @objc final public var clientID: Swift.String?
  @objc @available(*, deprecated, message: "Deprecated since 1.5.50. This flag is no longer required.")
  final public var enableStopShield: Swift.Bool
  @objc final public var customDomainUrl: Swift.String?
  @objc public init(withSiteId siteId: Swift.String, secretKey: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers final public class Shield : ObjectiveC.NSObject {
  @objc final public let sessionId: Swift.String
  @objc deinit
  @objc public static func setUp(with configuration: ShieldFraud.Configuration)
  @objc public static func isInitialized() -> Swift.Bool
  @objc public static func shared() -> ShieldFraud.Shield
  @objc public static func stopSDK()
}
extension ShieldFraud.Shield {
  @objc final public func sendAttributes(withScreenName screenName: Swift.String, data: [Swift.String : Swift.String] = [String: String]())
  @objc final public func sendAttributes(withScreenName screenName: Swift.String, data: [Swift.String : Swift.String] = [String: String](), _ handler: @escaping (Swift.Bool, Foundation.NSError?) -> Swift.Void)
  @objc final public func getLatestDeviceResult() -> [Swift.String : Any]?
  @objc final public func getErrorResponse() -> Foundation.NSError?
  @objc final public func setDeviceResultStateListener(_ isReady: (() -> Swift.Void)?)
  @objc final public func sendDeviceSignature(withScreenName screenName: Swift.String)
  @objc final public func sendDeviceSignature(withScreenName screenName: Swift.String, completionHandler: @escaping () -> Swift.Void)
  @objc final public func startTracking(moduleName: Swift.String, eventName: Swift.String)
  @objc final public func stopTracking(moduleName: Swift.String)
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class ShieldCrossPlatformHelper : ObjectiveC.NSObject {
  @objc public static func setCrossPlatformParameters(_ params: ShieldFraud.ShieldCrossPlatformParams)
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers final public class ShieldCrossPlatformParams : ObjectiveC.NSObject {
  @objc final public let name: Swift.String
  @objc final public let version: Swift.String
  @objc public init(name: Swift.String, version: Swift.String)
  @objc deinit
}
public enum ShieldLogger {
  public static func setUp(withCategory category: Swift.String? = nil, logLevel: ShieldFraud.LogLevel, isDebug: Swift.Bool, siteId: Swift.String, sessionId: Swift.String, isBotCheck: Swift.Bool?)
  public static func stop()
  public static func info(_ message: Swift.String, _ args: any Swift.CVarArg...)
  public static func debug(_ message: Swift.String, _ args: any Swift.CVarArg...)
  public static func debugPrint(_ message: Swift.String, _ args: any Swift.CVarArg...)
  public static func error(error: Foundation.NSError?)
  public static func errorPrint(error: Foundation.NSError?)
}
@objc public protocol ShieldModule {
  @objc static var moduleName: Swift.String { get }
  @objc func getContext(eventName: Swift.String?, callback: @escaping ([Swift.String : Any]) -> Swift.Void)
  @objc optional func getUrl() -> Swift.String
  @objc optional func startTracking()
  @objc optional func stopTracking()
  @objc optional func setParameters(dict: ShieldFraud.ShieldModuleParameters)
}
@objc @objcMembers public class ShieldModuleParameters : ObjectiveC.NSObject {
  @objc public var locationCollectionURL: Swift.String?
  public var locationTrackingTimeout: Swift.Int?
  public var locationCollectionInterval: Swift.Int?
  @objc public var sessionId: Swift.String?
  @objc public var siteId: Swift.String?
  @objc public var secretKey: Swift.String?
  public init(locationCollectionURL: Swift.String? = nil, locationTrackingTimeout: Swift.Int? = nil, locationCollectionInterval: Swift.Int? = nil, sessionId: Swift.String? = nil, siteId: Swift.String? = nil, secretKey: Swift.String? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TimeHelper : ObjectiveC.NSObject {
  @objc deinit
}
extension ShieldFraud.CaptchaType : Swift.Equatable {}
extension ShieldFraud.CaptchaType : Swift.Hashable {}
extension ShieldFraud.Environment : Swift.Equatable {}
extension ShieldFraud.Environment : Swift.Hashable {}
extension ShieldFraud.Environment : Swift.RawRepresentable {}
extension ShieldFraud.LogLevel : Swift.Equatable {}
extension ShieldFraud.LogLevel : Swift.Hashable {}
extension ShieldFraud.LogLevel : Swift.RawRepresentable {}
