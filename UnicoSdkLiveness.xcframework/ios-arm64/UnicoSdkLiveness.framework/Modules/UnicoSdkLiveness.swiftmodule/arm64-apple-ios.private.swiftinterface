// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name UnicoSdkLiveness
// swift-module-flags-ignorable: -enable-bare-slash-regex
import FaceTecSDK
import Foundation
import Swift
import UIKit
import UnicoSdkBase
import UnicoSdkBase/*.API*/
import UnicoSdkBase/*.DataTransferService*/
@_exported import UnicoSdkLiveness
import UnicoSdkPlugins
import _Concurrency
import _StringProcessing
@objc public class CaptureResult : ObjectiveC.NSObject {
  @objc public var base64: Swift.String!
  @objc public var encrypted: Swift.String!
  @objc public init(base64: Swift.String!, encrypted: Swift.String!)
  @objc deinit
}
public struct PrepareData : Swift.Equatable {
  public init(engine: UnicoSdkLiveness.PrepareData.Engine, theme: UnicoSdkLiveness.Theme, enableLogo: Swift.Bool)
  public static func == (a: UnicoSdkLiveness.PrepareData, b: UnicoSdkLiveness.PrepareData) -> Swift.Bool
}
extension UnicoSdkLiveness.PrepareData {
  public enum Engine : Swift.Equatable {
    case facetec(UnicoSdkLiveness.PrepareData.FacetecData)
    case dorothy(UnicoSdkLiveness.PrepareData.DorothyData)
    public static func == (a: UnicoSdkLiveness.PrepareData.Engine, b: UnicoSdkLiveness.PrepareData.Engine) -> Swift.Bool
  }
}
extension UnicoSdkLiveness.PrepareData {
  public struct FacetecData : Swift.Equatable {
    public init(dk: Swift.String, ec: Swift.String, appId: Swift.String, expiryDate: Swift.String, key: Swift.String)
    public static func == (a: UnicoSdkLiveness.PrepareData.FacetecData, b: UnicoSdkLiveness.PrepareData.FacetecData) -> Swift.Bool
  }
  public struct DorothyLicense : Swift.Equatable {
    public init(licensePayloadB64: Swift.String, masterLicenseSignature: Swift.String)
    public static func == (a: UnicoSdkLiveness.PrepareData.DorothyLicense, b: UnicoSdkLiveness.PrepareData.DorothyLicense) -> Swift.Bool
  }
  public struct DorothyData : Swift.Equatable {
    public init(metaTags: [UnicoSdkLiveness.PrepareData.DorothyDataMetaTag], license: UnicoSdkLiveness.PrepareData.DorothyLicense)
    public static func == (a: UnicoSdkLiveness.PrepareData.DorothyData, b: UnicoSdkLiveness.PrepareData.DorothyData) -> Swift.Bool
  }
  public struct DorothyDataMetaTag : Swift.Equatable {
    public init(action: Swift.String)
    public static func == (a: UnicoSdkLiveness.PrepareData.DorothyDataMetaTag, b: UnicoSdkLiveness.PrepareData.DorothyDataMetaTag) -> Swift.Bool
  }
}
public struct Theme : Swift.Equatable {
  public init(backgroundColor: UIKit.UIColor, boxMessageColor: UIKit.UIColor, textMessageColor: UIKit.UIColor, backgroundTakePictureButtonColor: UIKit.UIColor, iconTakePictureButtonColor: UIKit.UIColor, backgroundBottomDocumentColor: UIKit.UIColor, textBottomDocumentColor: UIKit.UIColor, silhouetteSuccessColor: UIKit.UIColor, silhouetteErrorColor: UIKit.UIColor, silhouetteNeutralColor: UIKit.UIColor)
  public static func == (a: UnicoSdkLiveness.Theme, b: UnicoSdkLiveness.Theme) -> Swift.Bool
}
public protocol UnicoLivenessDelegate : AnyObject {
  func onSuccess(livenessResult: UnicoSdkLiveness.LivenessResult)
  func onError(livenessError: UnicoSdkLiveness.LivenessError)
  func onLoggerListener(_ liveness: UnicoSdkLiveness.LivenessLogger?)
}
public struct LivenessError : Swift.Error, Swift.Equatable {
  public let code: Swift.Int
  public let message: Swift.String
  public init(code: Swift.Int, message: Swift.String)
  public static func == (a: UnicoSdkLiveness.LivenessError, b: UnicoSdkLiveness.LivenessError) -> Swift.Bool
}
public protocol LivenessResult {
  var serialize: [Swift.String : Any] { get }
  var session: [Swift.String : Any]? { get }
}
@objc final public class SessionTransactionDTO : ObjectiveC.NSObject {
  @objc public init(transactionId: Swift.String, isLive: Swift.Bool, order: Swift.Int)
  @objc deinit
}
public enum Env {
  case custom(service: UnicoSdkBase.DataTransferService, endpointKey: Swift.String, endpointIv: Swift.String)
  case development(endpointKey: Swift.String, endpointIv: Swift.String)
  case production(endpointKey: Swift.String, endpointIv: Swift.String)
}
public protocol UnicoLivenessPrepareCameraDelegate : AnyObject {
  func onCameraReady(unicoLivenessOpenCamera: UnicoSdkLiveness.UnicoLivenessOpenCamera)
  func onCameraError(livenessError: UnicoSdkLiveness.LivenessError)
}
public struct OpenLivenessDTO {
  public init(sdkKey: Swift.String?, sessionToken: Swift.String?, keyBody: Swift.String?, isIntegrationCaptureFlow: Swift.Bool, maxAttempts: Swift.Int)
}
public protocol UnicoLivenessRepresentable {
  func prepareCamera(env: UnicoSdkLiveness.Env, data: UnicoSdkLiveness.PrepareData, prepareDelegate: UnicoSdkLiveness.UnicoLivenessPrepareCameraDelegate)
}
@_hasMissingDesignatedInitializers final public class UnicoLiveness : UnicoSdkLiveness.UnicoLivenessRepresentable {
  public init(viewController: UIKit.UIViewController)
  final public func prepareCamera(env: UnicoSdkLiveness.Env, data: UnicoSdkLiveness.PrepareData, prepareDelegate: UnicoSdkLiveness.UnicoLivenessPrepareCameraDelegate)
  @objc deinit
}
public protocol UnicoLivenessOpenCamera {
  func openCamera(data: UnicoSdkLiveness.OpenLivenessDTO, unicoLivenessDelegate: UnicoSdkLiveness.UnicoLivenessDelegate)
}
public protocol LivenessLoggerProvider {
  var name: Swift.String { get }
  var type: Swift.String { get }
  var version: Swift.String? { get }
}
public protocol LivenessLogger {
  var provider: UnicoSdkLiveness.LivenessLoggerProvider? { get }
  var attempts: Swift.Int? { get set }
  var maxAttempts: Swift.Int? { get set }
  var isLive: Swift.Bool? { get set }
}
